/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported from C# to Java by Wolfgang Ahorner
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/
-->begin
import haxe.io.Input;
import haxe.io.Eof;

//import java.util.Map;
//import java.util.HashMap;
//import java.io.InputStream;
//import java.io.IOException;
//import java.io.RandomAccessFile;

class Token {
	public var kind:Int;    // token kind
	public var pos:Int;     // token position in the source text (starting at 0)
	public var col:Int;     // token column (starting at 1)
	public var line:Int;    // token line (starting at 1)
	public var val:String;  // token value
	public var next:Token;  // ML 2005-03-11 Peek tokens are kept in linked list
	public function new() {}
}

//-----------------------------------------------------------------------------------
// Buffer
//-----------------------------------------------------------------------------------

class Buffer {
	public static var EOF:Int = 0xFFFF;

	private var stream:Input;
	
	public function new(s:Input)
	{
		pos = 0;
		bufChar = 0;
		stream = s;
		Read();
	}
	
	private var pos:Int;
	
	public function getPos():Int
	{
		return pos;
	}
	
	private var bufChar:Int;
	
	public function Read():Int
	{
		pos++;
		var ret:Int = bufChar;
		try {
			bufChar = stream.readByte();
		} catch (e:Eof) {
			return EOF;
		}
		return ret;
	}
	
	public function Peek():Int
	{
		return bufChar;
	}

/*
	// This Buffer supports the following cases:
	// 1) seekable stream (file)
	//    a) whole stream in buffer
	//    b) part of stream in buffer
	// 2) non seekable stream (network, console)

	public static var EOF:Int = Character.MAX_VALUE + 1;
	private static var MIN_BUFFER_LENGTH:Int = 1024; // 1KB
	private static var MAX_BUFFER_LENGTH:Int = MIN_BUFFER_LENGTH * 64; // 64KB
	private byte[] buf;   // input buffer
	private var bufStart:var; // position of first byte in buffer relative to input stream
	private var bufLen:var;   // length of buffer
	private var fileLen:var;  // length of input stream (may change if stream is no file)
	private var bufPos:var;      // current position in buffer
	private var file:RandomAccessFile; // input stream (seekable)
	private var stream:InputStream; // growing input stream (e.g.: console, network)

	public function new(s:InputStream) {
		stream = s;
		fileLen = bufLen = bufStart = bufPos = 0;
		buf = new byte[MIN_BUFFER_LENGTH];
	}

	public Buffer(String fileName) {
		try {
			file = new RandomAccessFile(fileName, "r");
			fileLen = (int) file.length();
			bufLen = Math.min(fileLen, MAX_BUFFER_LENGTH);
			buf = new byte[bufLen];
			bufStart = Integer.MAX_VALUE; // nothing in buffer so far
			if (fileLen > 0) setPos(0); // setup buffer to position 0 (start)
			else bufPos = 0; // index 0 is already after the file, thus setPos(0) is invalid
			if (bufLen == fileLen) Close();
		} catch (IOException e) {
			throw new FatalError("Could not open file " + fileName);
		}
	}

	// don't use b after this call anymore
	// called in UTF8Buffer constructor
	protected Buffer(Buffer b) {
		buf = b.buf;
		bufStart = b.bufStart;
		bufLen = b.bufLen;
		fileLen = b.fileLen;
		bufPos = b.bufPos;
		file = b.file;
		stream = b.stream;
		// keep finalize from closing the file
		b.file = null;
	}

	protected void finalize() throws Throwable {
		super.finalize();
		Close();
	}

	protected void Close() {
		if (file != null) {
			try {
				file.close();
				file = null;
			} catch (IOException e) {
				throw new FatalError(e.getMessage());
			}
		}
	}

	public int Read() {
		if (bufPos < bufLen) {
			return buf[bufPos++] & 0xff;  // mask out sign bits
		} else if (getPos() < fileLen) {
			setPos(getPos());         // shift buffer start to pos
			return buf[bufPos++] & 0xff; // mask out sign bits
		} else if (stream != null && ReadNextStreamChunk() > 0) {
			return buf[bufPos++] & 0xff;  // mask out sign bits
		} else {
			return EOF;
		}
	}

	public int Peek() {
		int curPos = getPos();
		int ch = Read();
		setPos(curPos);
		return ch;
	}

	public String GetString(int beg, int end) {
	    int len = end - beg;
	    char[] buf = new char[len];
	    int oldPos = getPos();
	    setPos(beg);
	    for (int i = 0; i < len; ++i) buf[i] = (char) Read();
	    setPos(oldPos);
	    return new String(buf);
	}

	public int getPos() {
		return bufPos + bufStart;
	}

	public void setPos(int value) {
		if (value >= fileLen && stream != null) {
			// Wanted position is after buffer and the stream
			// is not seek-able e.g. network or console,
			// thus we have to read the stream manually till
			// the wanted position is in sight.
			while (value >= fileLen && ReadNextStreamChunk() > 0);
		}

		if (value < 0 || value > fileLen) {
			throw new FatalError("buffer out of bounds access, position: " + value);
		}

		if (value >= bufStart && value < bufStart + bufLen) { // already in buffer
			bufPos = value - bufStart;
		} else if (file != null) { // must be swapped in
			try {
				file.seek(value);
				bufLen = file.read(buf);
				bufStart = value; bufPos = 0;
			} catch(IOException e) {
				throw new FatalError(e.getMessage());
			}
		} else {
			// set the position to the end of the file, Pos will return fileLen.
			bufPos = fileLen - bufStart;
		}
	}
	
	// Read the next chunk of bytes from the stream, increases the buffer
	// if needed and updates the fields fileLen and bufLen.
	// Returns the number of bytes read.
	private int ReadNextStreamChunk() {
		int free = buf.length - bufLen;
		if (free == 0) {
			// in the case of a growing input stream
			// we can neither seek in the stream, nor can we
			// foresee the maximum length, thus we must adapt
			// the buffer size on demand.
			byte[] newBuf = new byte[bufLen * 2];
			System.arraycopy(buf, 0, newBuf, 0, bufLen);
			buf = newBuf;
			free = bufLen;
		}
		
		int read;
		try { read = stream.read(buf, bufLen, free); }
		catch (IOException ioex) { throw new FatalError(ioex.getMessage()); }
		
		if (read > 0) {
			fileLen = bufLen = (bufLen + read);
			return read;
		}
		// end of stream reached
		return 0;
	}*/
}

//-----------------------------------------------------------------------------------
// UTF8Buffer
//-----------------------------------------------------------------------------------

/*
class UTF8Buffer extends Buffer {
	UTF8Buffer(Buffer b) { super(b); }

	public int Read() {
		int ch;
		do {
			ch = super.Read();
			// until we find a utf8 start (0xxxxxxx or 11xxxxxx)
		} while ((ch >= 128) && ((ch & 0xC0) != 0xC0) && (ch != EOF));
		if (ch < 128 || ch == EOF) {
			// nothing to do, first 127 chars are the same in ascii and utf8
			// 0xxxxxxx or end of file character
		} else if ((ch & 0xF0) == 0xF0) {
			// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
			int c1 = ch & 0x07; ch = super.Read();
			int c2 = ch & 0x3F; ch = super.Read();
			int c3 = ch & 0x3F; ch = super.Read();
			int c4 = ch & 0x3F;
			ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;
		} else if ((ch & 0xE0) == 0xE0) {
			// 1110xxxx 10xxxxxx 10xxxxxx
			int c1 = ch & 0x0F; ch = super.Read();
			int c2 = ch & 0x3F; ch = super.Read();
			int c3 = ch & 0x3F;
			ch = (((c1 << 6) | c2) << 6) | c3;
		} else if ((ch & 0xC0) == 0xC0) {
			// 110xxxxx 10xxxxxx
			int c1 = ch & 0x1F; ch = super.Read();
			int c2 = ch & 0x3F;
			ch = (c1 << 6) | c2;
		}
		return ch;
	}
}*/

//-----------------------------------------------------------------------------------
// StartStates  -- maps characters to start states of tokens
//-----------------------------------------------------------------------------------

class StartStates {
	private var tab:Array<Elem>;
	
	public function new() {
		tab = []; //new Elem[128]
	}

	public function set(key:Int, val:Int):Void {
		var e:Elem = new Elem(key, val);
		var k:Int = key % 128;
		e.next = tab[k]; tab[k] = e;
	}

	public function state(key:Int):Int {
		var e:Elem = tab[key % 128];
		while (e != null && e.key != key) e = e.next;
		return e == null ? 0: e.val;
	}
}

class Elem {
	public var key:Int;
	public var val:Int;
	public var next:Elem;
	public function new(key:Int, val:Int) { this.key = key; this.val = val; }
}

//-----------------------------------------------------------------------------------
// Scanner
//-----------------------------------------------------------------------------------

class Scanner {
	static var EOL:Int = '\n'.charCodeAt(0);
	static var eofSym:Int = 0;
-->declarations

	public var buffer:Buffer; // scanner buffer

	var t:Token;           // current token
	var ch:Int;            // current input character
	var pos:Int;           // byte position of current character
	var col:Int;           // column number of current character
	var line:Int;          // line number of current character
	var oldEols:Int;       // EOLs that appeared in a comment;

	var tokens:Token;      // list of tokens already peeked (first token is a dummy)
	var pt:Token;          // current peek token
	
	var tval:StringBuf; // token text used in NextToken(), dynamically enlarged
	var tlen:Int;          // length of current token


//	static var start:StartStates; // maps initial token character to start state
//	static var literals:Hash<Int>;      // maps literal strings to literal kinds
	static var start = new StartStates();
	static var literals = (function () {
		var literals = new Hash<Int>();
-->initialization
		return literals;
	})();
	
	public function new (s:Input) {
		tval = new StringBuf();
		buffer = new Buffer(s);
		Init();
	}
	
	function Init ():Void {
		pos = -1; line = 1; col = 0;
		oldEols = 0;
		NextCh();
/*		if (ch == 0xEF) { // check optional byte order mark for UTF-8
			NextCh(); int ch1 = ch;
			NextCh(); int ch2 = ch;
			if (ch1 != 0xBB || ch2 != 0xBF) {
				throw new FatalError("Illegal byte order mark at start of file");
			}
			buffer = new UTF8Buffer(buffer); col = 0;
			NextCh();
		}*/
		pt = tokens = new Token();  // first token is a dummy
	}
	
	function NextCh():Void {
		if (oldEols > 0) { ch = EOL; oldEols--; }
		else {
			pos = buffer.getPos();
			ch = buffer.Read(); col++;
			// replace isolated '\r' by '\n' in order to make
			// eol handling uniform across Windows, Unix and Mac
			if (ch == '\r'.charCodeAt(0) && buffer.Peek() != '\n'.charCodeAt(0)) ch = EOL;
			if (ch == EOL) { line++; col = 0; }
		}
-->casing
	}
	
	function AddCh():Void {
/*		if (tlen >= tval.length) {
			var newBuf:Array<String> = [];
			char[] newBuf = new char[2 * tval.length];
			System.arraycopy(tval, 0, newBuf, 0, tval.length);
			tval = newBuf;
		}*/
		if (ch != Buffer.EOF) {
-->casing2
			NextCh();
		}

	}
	
-->comments

	function CheckLiteral():Void {
		var val:String = t.val;
-->casing3
		var kind:Int = literals.get(val);
		if (kind != null) {
			t.kind = kind;
		}
	}

	function NextToken():Token {
		while (ch == ' '.charCodeAt(0) ||
-->scan1
		) NextCh();
-->scan2
		t = new Token();
		t.pos = pos; t.col = col; t.line = line; 
		var state:Int = start.state(ch);
		tlen = 0; AddCh();

		while (true) {
			switch (state) {
				case -1: t.kind = eofSym; break; // NextCh already done 
				case 0: t.kind = noSym; break;  // NextCh already done
-->scan3
			}
		}
		t.val = tval.toString();
		tval = new StringBuf();
		return t;
	}
	
	// get the next token (possibly a token already seen during peeking)
	public function Scan ():Token {
		if (tokens.next == null) {
			return NextToken();
		} else {
			pt = tokens = tokens.next;
			return tokens;
		}
	}

	// get the next token, ignore pragmas
	public function Peek ():Token {
		do {
			if (pt.next == null) {
				pt.next = NextToken();
			}
			pt = pt.next;
		} while (pt.kind > maxT); // skip pragmas

		return pt;
	}

	// make sure that peeking starts at current scan position
	public function ResetPeek ():Void { pt = tokens; }

} // end Scanner

$$$