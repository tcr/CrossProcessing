/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported from C# to Java by Wolfgang Ahorner
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/
-->begin
import haxe.io.Input;
import haxe.io.Eof;

class Token
{
	public var kind:Int;    // token kind
	public var pos:Int;     // token position in the source text (starting at 0)
	public var col:Int;     // token column (starting at 1)
	public var line:Int;    // token line (starting at 1)
	public var val:String;  // token value
	public var next:Token;  // ML 2005-03-11 Peek tokens are kept in linked list
	public function new() {}
}

//-----------------------------------------------------------------------------------
// Buffer
//-----------------------------------------------------------------------------------

class Buffer
{
	public static var EOF:Int = 0xFFFF;

	private var stream:Input;
	
	public function new(s:Input)
	{
		pos = 0;
		bufChar = 0;
		stream = s;
		Read();
	}
	
	private var pos:Int;
	
	public function getPos():Int
	{
		return pos;
	}
	
	private var bufChar:Int;
	
	public function Read():Int
	{
		pos++;
		var ret:Int = bufChar;
		try {
			bufChar = stream.readByte();
		} catch (e:Eof) {
			bufChar = EOF;
		}
		return ret;
	}
	
	public function Peek():Int
	{
		return bufChar;
	}
}

//-----------------------------------------------------------------------------------
// StartStates  -- maps characters to start states of tokens
//-----------------------------------------------------------------------------------

class StartStates {
	private var tab:Array<Elem>;
	
	public function new() {
		tab = []; //new Elem[128]
	}

	public function set(key:Int, val:Int):Void {
		var e:Elem = new Elem(key, val);
		var k:Int = key % 128;
		e.next = tab[k]; tab[k] = e;
	}

	public function state(key:Int):Int {
		var e:Elem = tab[key % 128];
		while (e != null && e.key != key) e = e.next;
		return e == null ? 0: e.val;
	}
}

class Elem {
	public var key:Int;
	public var val:Int;
	public var next:Elem;
	public function new(key:Int, val:Int) { this.key = key; this.val = val; }
}

//-----------------------------------------------------------------------------------
// Scanner
//-----------------------------------------------------------------------------------

class Scanner {
	static var EOL:Int = 10; // \n
	static var eofSym:Int = 0;
-->declarations

	public var buffer:Buffer; // scanner buffer

	var t:Token;           // current token
	var ch:Int;            // current input character
	var pos:Int;           // byte position of current character
	var col:Int;           // column number of current character
	var line:Int;          // line number of current character
	var oldEols:Int;       // EOLs that appeared in a comment;

	var tokens:Token;      // list of tokens already peeked (first token is a dummy)
	var pt:Token;          // current peek token
	
	var tval:StringBuf; // token text used in NextToken(), dynamically enlarged
	var tlen:Int;          // length of current token


//	static var start:StartStates; // maps initial token character to start state
//	static var literals:Hash<Int>;      // maps literal strings to literal kinds
	static var start = new StartStates();
	static var literals = (function () {
		var literals = new Hash<Int>();
-->initialization
		return literals;
	})();
	
	public function new (s:Input) {
		tval = new StringBuf();
		buffer = new Buffer(s);
		Init();
	}
	
	function Init ():Void {
		pos = -1; line = 1; col = 0;
		oldEols = 0;
		NextCh();
/*		if (ch == 0xEF) { // check optional byte order mark for UTF-8
			NextCh(); int ch1 = ch;
			NextCh(); int ch2 = ch;
			if (ch1 != 0xBB || ch2 != 0xBF) {
				throw new FatalError("Illegal byte order mark at start of file");
			}
			buffer = new UTF8Buffer(buffer); col = 0;
			NextCh();
		}*/
		pt = tokens = new Token();  // first token is a dummy
	}
	
	function NextCh():Void {
		if (oldEols > 0) { ch = EOL; oldEols--; }
		else {
			pos = buffer.getPos();
			ch = buffer.Read(); col++;
			// replace isolated '\r' by '\n' in order to make
			// eol handling uniform across Windows, Unix and Mac
			if (ch == 13 && buffer.Peek() != 10) ch = EOL; // \r, \n
			if (ch == EOL) { line++; col = 0; }
		}
-->casing
	}
	
	function AddCh():Void {
		if (ch != Buffer.EOF) {
-->casing2
			NextCh();
		}

	}
	
-->comments

	function CheckLiteral():Void {
		var val:String = t.val;
-->casing3
		var kind:Int = literals.get(val);
		if (kind != null) {
			t.kind = kind;
		}
	}

	function NextToken():Token {
		while (ch == 32 || // ' '
-->scan1
		) NextCh();
-->scan2
		t = new Token();
		t.pos = pos; t.col = col; t.line = line; 
		var state:Int = start.state(ch);
		tlen = 0; AddCh();

		while (true) {
			switch (state) {
				case -1: t.kind = eofSym; break; // NextCh already done 
				case 0: t.kind = noSym; break;  // NextCh already done
-->scan3
			}
		}
		t.val = tval.toString();
		tval = new StringBuf();
		return t;
	}
	
	// get the next token (possibly a token already seen during peeking)
	public function Scan ():Token {
		if (tokens.next == null) {
			return NextToken();
		} else {
			pt = tokens = tokens.next;
			return tokens;
		}
	}

	// get the next token, ignore pragmas
	public function Peek ():Token {
		do {
			if (pt.next == null) {
				pt.next = NextToken();
			}
			pt = pt.next;
		} while (pt.kind > maxT); // skip pragmas

		return pt;
	}

	// make sure that peeking starts at current scan position
	public function ResetPeek ():Void { pt = tokens; }

} // end Scanner

$$$