import xpde.parser.Scanner;
import xpde.parser.AST;
import haxe.io.Input;
import haxe.io.StringInput;

COMPILER PdeProgram
  
/*---------------------------- token sets -----------------------------------*/

static var maxTerminals:Int = 160;  // set size

static function newSet(values:Array<Int>):BitSet {
  var s:BitSet = new BitSet(maxTerminals);
  for (i in 0...values.length) s.set(values[i]);
  return s;
}

static function or(s1:BitSet, s2:BitSet):BitSet {
  s1.or(s2);
  return s1;
}

static var typeKWarr:Array<Int> = [_byte, _short, _char, _int, _long, _float, _double, 
                          _boolean];
static var castFollowerArr:Array<Int> = [_ident, _new, _super, _this, _void, _intLit,
                                _floatLit, _charLit, _stringLit, _true, _false,
                                _null, _lpar, _not, _tilde];
static var prefixArr:Array<Int> = [_inc, _dec, _not, _tilde, _plus, _minus];                                

static var typeKW:BitSet       = newSet(typeKWarr);
static var castFollower:BitSet = or(newSet(castFollowerArr), typeKW);
static var prefix:BitSet       = newSet(prefixArr);

/*---------------------------- auxiliary methods ----------------------------*/

public function error (s:String):Void {
  if (errDist >= minErrDist) errors.SemErr(la.line, la.col, s);
  errDist = 0;
}

// "(" BasicType {"[""]"} ")"
function isSimpleTypeCast ():Bool {
  // assert: la.kind == _lpar
  scanner.ResetPeek();
  var pt1:Token = scanner.Peek();
  
  if (typeKW.get(pt1.kind)) {
    var pt:Token = scanner.Peek();
    pt = skipDims(pt);
    if (pt != null) {
      return pt.kind == _rpar;
    }
  }
  return false;
}

// "(" Qualident {"[" "]"} ")" castFollower
function guessTypeCast ():Bool {
  // assert: la.kind == _lpar
  scanner.ResetPeek();
  var pt:Token = scanner.Peek();
  pt = rdQualident(pt);
  if (pt != null) {
    pt = skipDims(pt);
    if (pt != null) {
      var pt1:Token = scanner.Peek();
      return pt.kind == _rpar && castFollower.get(pt1.kind);
    }
  }
  return false;
}

// "[" "]"
function skipDims (pt:Token):Token {
  if (pt.kind != _lbrack) return pt;
  do {
     pt = scanner.Peek();
    if (pt.kind != _rbrack) return null;
     pt = scanner.Peek();
  } while (pt.kind == _lbrack);  
  return pt;
}

/* Checks whether the next sequence of tokens is a qualident *
 * and returns the qualident string                          *
 * !!! Proceeds from current peek position !!!               */
function rdQualident (pt:Token):Token {
  var qualident:String = "";
  
  if (pt.kind == _ident) {
    qualident = pt.val;
    pt = scanner.Peek();
    while (pt.kind == _dot) {
      pt = scanner.Peek();
      if (pt.kind != _ident) return null;
      qualident += "." + pt.val;
      pt = scanner.Peek();
    }
    return pt;
  } else return null;
}

// Return the n-th token after the current lookahead token
function peek(n:Int):Token {
  scanner.ResetPeek();
  var x:Token = la;
  while (n > 0) { x = scanner.Peek(); n--; }
  return x;
}


function checkExprStat(expression:Expression):Void {
	switch (expression)
	{
	    // instantiation
	    case EObjectInstantiation(_, _):
	    
	    // calling
//	    case ELocalCall(_, _):
	    case ECall(_, _, _):
	    case EThisCall(_):
	    case ESuperCall(_):
	    // assignment
	    case EArrayAssignment(_, _, _):
	    case EAssignment(_, _, _):
	    case ELocalAssignment(_, _):
	    
	    // operations
	    case EPrefix(_, _):
	    case EPostfix(_, _):
	    
	    // second pass
	    case ELexExpression(expression):
		switch (expression) {
		    case LCall(_, _):
		    case LAssignment(_, _):
		    default: error("not a statement" + " (" + expression + ")");
		}
	    
	    default: error("not a statement" + " (" + expression + ")");
	}
}

/*---------------------------- type ----------------------------*/

function compoundBrackets(type:DataType, bCount:Int):DataType {
	if (bCount == 0)
		return type;
	switch (type) {
	    case DTArray(type, dimensions): return DTArray(type, dimensions + bCount);
	    default: return DTArray(type, bCount);
	}
}

/*---------------------------- modifiers ----------------------------*/

function addModifier(set:EnumSet<Modifier>, modifier:Modifier):Void {
	if (set.contains(modifier))
		error("repeated modifier " + modifier);
	else
		set.add(modifier);
}

function checkModifierPermission(set:EnumSet<Modifier>, permission:EnumSet<Modifier>):Void {
	for (modifier in set)
		if (!permission.contains(modifier))
			error("modifier(s) " + set + "not allowed here");
	else
		checkModifierAccess(set);
}

function checkModifierAccess(set:EnumSet<Modifier>):Void {
	var access:Int = 0;
	if (set.contains(MPublic))
		access++;
	if (set.contains(MPrivate))
		access++;
	if (set.contains(MProtected))
		access++;
	if (access > 1)
		error("illegal combination of modifiers: " + set);
}

/*---------------------------- contexts ----------------------------*/

var classContexts:Array<ClassContext>;
var blockContexts:Array<BlockContext>;

/*-----------------------------------------------------------------*
 * Resolver routines to resolve LL(1) conflicts:                   *
 * These routines return a boolean value that indicates            *
 * whether the alternative at hand shall be choosen or not.        *
 * They are used in IF ( ... ) expressions.                        *       
 *-----------------------------------------------------------------*/

// ',' (no '}')
function commaAndNoRBrace():Bool {
  return (la.kind == _comma && peek(1).kind != _rbrace);
}

// '.' ident
function dotAndIdent():Bool {
  return la.kind == _dot && peek(1).kind == _ident;
}

// ident '('
function identAndLPar ():Bool {
  return la.kind == _ident && peek(1).kind == _lpar;
}

// ident ':'
function isLabel():Bool {
  return la.kind == _ident && peek(1).kind == _colon;
}

// '[' (no ']')
function nonEmptyBracket():Bool {
  return (la.kind == _lbrack && peek(1).kind != _rbrack);
}

// '['']'
function emptyBracket():Bool {
  return (la.kind == _lbrack && peek(1).kind == _rbrack);
}

// final or Type ident
function isLocalVarDecl(finalIsSuccess:Bool):Bool {
  var pt:Token = la;
  scanner.ResetPeek();
  
  if (la.kind == _final) 
    if (finalIsSuccess) return true;
    else pt = scanner.Peek();

  // basicType | ident
  if (typeKW.get(pt.kind))
    pt = scanner.Peek();
  else
    pt = rdQualident(pt);
    
  if (pt != null) {
    pt = skipDims(pt);
    if (pt != null) {
      return pt.kind == _ident;
    }
  }
  return false;
}

function isTypeCast():Bool {
  if (la.kind != _lpar) return false;
  if (isSimpleTypeCast()) return true;
  return guessTypeCast();
}

// '.' ("super" '.' | "class" | "this") | '(' | '['']'
function isIdentSuffix():Bool {
  if (la.kind == _dot) {
    scanner.ResetPeek();
    var pt:Token = scanner.Peek();
    if (pt.kind == _super) return scanner.Peek().kind == _dot;
    return (pt.kind == _class || pt.kind == _this);
  }
  return (la.kind == _lpar || emptyBracket());
}

/*--------------------------- program type -------------------------*/

/* http://dev.processing.org/source/index.cgi/trunk/processing/app/src/processing/app/preproc/pde.g?view=markup */

function isJavaProgram():Bool {
	return (la.kind == _public && peek(1).kind == _class);
}

function isActiveProgram():Bool {
	return (la.kind == _void && peek(1).kind == _ident && peek(2).kind == _lpar);
}

/*[NOTE] pde vs. java changes are available here:
http://dev.processing.org/source/index.cgi/trunk/processing/app/src/processing/app/preproc/pde.g?view=markup */

/*-------------------------------------------------------------------------*/

CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */

  zero          = '0'.
  zeroToThree   = zero + "123" .
  octalDigit    = zero + "1234567" . 
  nonZeroDigit  = "123456789".
  digit         = '0' + nonZeroDigit .
  hexDigit      = digit + "ABCDEFabcdef" .
  letter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '$'.

  char          = ANY - "'" - '\\' - cr - lf.
  stringChar    = ANY - "\"" - '\\' - cr - lf.

TOKENS
  ident         = letter { letter | digit }.
  /*-------------------------------------------------------------------------*/
  intLit = 
  (  zero | nonZeroDigit { digit }
  | ( "0x" | "0X" ) hexDigit { hexDigit }
  | '0' octalDigit { octalDigit }
  ) [ "l" | "L" ].
  /*-------------------------------------------------------------------------*/
  floatLit =
    "." digit {digit} 
    [("e" | "E") ["+" | "-"] digit {digit}] 
    [ "F" | "f" | "D" | "d" ]
  | digit {digit} 
    ( "." {digit} 
      [("e" | "E" ) ["+" | "-"] digit {digit} ] 
      [ "F" | "f" | "D" | "d" ]
    | ("e" | "E") ["+" | "-"] digit {digit}
      [ "F" | "f" | "D" | "d" ]
    | "F" | "f" | "D" | "d"
    ).  
  /*-------------------------------------------------------------------------*/
  charLit = 
    "'" ( char
        | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\"
               | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
               | zeroToThree [ octalDigit ] [ octalDigit ]
               | octalDigit [ octalDigit ]
               )
        ) 
    "'".
  /*-------------------------------------------------------------------------*/
  stringLit = 
    "\"" { stringChar
         | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\"
                | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
                | zeroToThree [ octalDigit ] [ octalDigit ]
                | octalDigit [ octalDigit ]
                )
         } 
    "\"".

  /*----- keyword names needed in LL(1) resolvers -----*/

  boolean = "boolean".
  byte    = "byte".
  char    = "char".
  class   = "class".
  double  = "double".
  false   = "false".
  final   = "final".
  float   = "float".
  import_ = "import".
  int     = "int".
  long    = "long".
  new     = "new".
  null    = "null".
  public  = "public".
  short   = "short".
  static  = "static".
  super   = "super".
  this    = "this".
  true    = "true".
  void    = "void".
  
  /*----- operators and special characters needed in LL(1) resolvers --------------*/

  colon   = ":".
  comma   = ",".
  dec     = "--".
  dot     = ".".
  inc     = "++".
  lbrace  = "{".
  lbrack  = "[".
  lpar    = "(".
  minus   = "-".
  not     = "!".
  plus    = "+".
  rbrace  = "}".
  rbrack  = "]".
  rpar    = ")".
  tilde   = "~".

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO lf

IGNORE lf + cr + tab

/*---------------------------------------------------------------------------*/

PRODUCTIONS

PdeProgram
= { ImportDeclaration<.out importIdent:Array<String>.>	(. unit.context.mapImports(importIdent); .)
    }
  (IF (isJavaProgram()) TypeDeclaration { TypeDeclaration }
    |							(.
							// default imports
							unit.context.mapImports(['xpde', 'core', '*']);
							unit.context.mapImports(['xpde', 'xml', '*']);

							// initialize active program
							classContexts.unshift(new ClassContext(new EnumSet<Modifier>([MPublic]), unit.packageDeclaration.slice( -1)[0]));
							classContexts[0].extend = DTReference(['xpde', 'core', 'PApplet']);
							.)
    { (IF (isLocalVarDecl(false)) LocalVariableDeclaration) ";" }
    ( IF (isActiveProgram())
      ClassBodyDeclaration { ClassBodyDeclaration }
      |							(.
//[TODO] this in some graceful manner
							// move field declarations to setup method
/*							blockContext = fieldContext = new BlockContext();
							for (identifier in tempContext.definitions.keys())
							{
								methodContext.definitions.set(identifier, tempContext.definitions.get(identifier));
								tempContext.definitions.remove(identifier);
							}*/
							
							// initialize setup method
							blockContexts.unshift(new BlockContext());
							.)
        BlockStatement { BlockStatement }		(.
							// add to class
							classContexts[0].defineMethod( {
							    identifier: 'setup',
							    type: null,
							    modifiers: new EnumSet<Modifier>(),
							    parameters: [],
							    body: blockContexts.shift().getBlockStatement()
							});
							.)
      )
    )							(.
							// add class
							unit.context.defineClass(classContexts.shift().getClassDefinition());
							
							// validate script
							if (la.kind != _EOF)
								error("unexpected script termination");
							.)
.

/*---------------------------------------------------------------------------*/

CompilationUnit						(. var packageDeclaration = []; .)
= [ "package" Qualident<.out qualident:Array<String>.>	(. packageDeclaration = qualident; .)
    ';' ]
  { ImportDeclaration<.out importIdent:Array<String>.>	(. unit.context.mapImports(importIdent); .)
    }
  { TypeDeclaration
    }							(.
							// verify package
							if (packageDeclaration.join('.') != unit.packageDeclaration.join('.'))
								error('invalid package declaration (expecting "' + unit.packageDeclaration.join('.') + '")');
							// verify class file
							if (la.kind != _EOF)
								error("'class' or 'interface' expected");
							.)
.

/*---------------------------------------------------------------------------*/

Qualident<.out qualident:Array<String>.>		(. qualident = []; .)
= ident							(. qualident.push(t.val); .)
  { '.' ident						(. qualident.push(t.val); .)
    }
.

/*---------------------------------------------------------------------------*/

ImportDeclaration<.out importIdent:Array<String>.>
= "import" ident					(. importIdent = [t.val]; .)
  QualifiedImport<.out arg:Array<String>.> ';'		(. importIdent = importIdent.concat(arg); .)
.

/*---------------------------------------------------------------------------*/

QualifiedImport<.out importIdent:Array<String>.>
= "." (ident						(. importIdent = [t.val]; .)
        [QualifiedImport<. out arg:Array<String>.>	(. importIdent = importIdent.concat(arg); .)
	  ] | "*"					(. importIdent = ['*']; .) 
          )
.

/*---------------------------------------------------------------------------*/

TypeDeclaration
= ClassOrInterfaceDeclaration
| ";"
.

/*---------------------------------------------------------------------------*/

ClassOrInterfaceDeclaration				(. var modifiers = new EnumSet<Modifier>(); .) 
= { ClassModifier<modifiers> } 
  ( ClassDeclaration<modifiers>
  |  InterfaceDeclaration<modifiers>
  )
.

/*---------------------------------------------------------------------------*/

ClassModifier<.modifiers:EnumSet<Modifier>.>
= "public"						(. addModifier(modifiers, MPublic); .)
| "protected"						(. addModifier(modifiers, MProtected); .)
| "private"						(. addModifier(modifiers, MPrivate); .)
| "abstract"						(. addModifier(modifiers, MAbstract); .)
| "static"						(. addModifier(modifiers, MStatic); .)
| "final"						(. addModifier(modifiers, MFinal); .)
| "strictfp"						(. addModifier(modifiers, MStrictfp); .)
.

/*---------------------------------------------------------------------------*/

Modifier0<.modifiers:EnumSet<Modifier>.>
= "static"						(. addModifier(modifiers, MStatic); .)
|  Modifier1<modifiers>
.

/*---------------------------------------------------------------------------*/

Modifier1<.modifiers:EnumSet<Modifier>.>
= "public"						(. addModifier(modifiers, MPublic); .)
| "protected"						(. addModifier(modifiers, MProtected); .)
| "private"						(. addModifier(modifiers, MPrivate); .)
| "abstract"						(. addModifier(modifiers, MAbstract); .)
| "final"						(. addModifier(modifiers, MFinal); .)
| "native"						(. addModifier(modifiers, MNative); .)
| "synchronized"					(. addModifier(modifiers, MSynchronized); .)
| "transient"						(. addModifier(modifiers, MTransient); .)
| "volatile"						(. addModifier(modifiers, MVolatile); .)
| "strictfp"						(. addModifier(modifiers, MStrictfp); .)
.

/*---------------------------------------------------------------------------*/

Type<out type:DataType>					/* TODO: qualifier MAY be a local class, an inner class, or a top-level import */
= ( Qualident<.out qualident:Array<String>.>		(. type = DTLexReference(qualident); .)
  | BasicType<out primitive:PrimitiveType>		(. type = DTPrimitive(primitive); .) 
  ) BracketsOpt<out bCount:Int>				(. type = compoundBrackets(type, bCount); .)
.

/*---------------------------------------------------------------------------*/

BasicType<out type:PrimitiveType>
= "byte"						(. type = PTByte; .)
| "short"						(. type = PTShort; .)
| "char"						(. type = PTChar; .)
| "int"							(. type = PTInt; .)
| "long"						(. type = PTLong; .)
| "float"						(. type = PTFloat; .)
| "double"						(. type = PTDouble; .)
| "boolean"						(. type = PTBoolean; .)
.

/*---------------------------------------------------------------------------*/

BracketsOpt<out bCount:Int>				(. bCount = 0; .)
= { "[" "]"						(. bCount++; .)
    }
.

/*---------------------------------------------------------------------------*/

TypeList<.out list:Array<DataType>.>			(. list = []; .)	
= Type<out type:DataType>				(. list.push(type); .)
  { "," Type<out type:DataType>				(. list.push(type); .)
    }
.

/*---------------------------------------------------------------------------*/

/*
FormalParameter0<out parameter:FormalParameter>
= [ "final" ] Type<out type:DataType> VariableDeclaratorId
.*/

FormalParameter0<out parameter:FormalParameter>		(. var modifiers = new EnumSet<Modifier>(); .)
= [ "final"						(. modifiers.add(MFinal); .)
    ] Type<out type:DataType> ident			(. var identifier:String = t.val; .)
  BracketsOpt<out bCount:Int>				(. type = compoundBrackets(type, bCount); .)
							(. parameter = {identifier: identifier, type: type, modifiers: modifiers}; .)
.

/*---------------------------------------------------------------------------*/

QualidentList						(. var list:Array<Array<String>> = []; .)
= Qualident<.out qualident:Array<String>.>		(. list.push(qualident); .)
  { "," Qualident<.out qualident:Array<String>.>	(. list.push(qualident); .)
    }
.

/*---------------------------------------------------------------------------*/

VariableDeclarator<.context:FieldContext, modifiers:EnumSet<Modifier>, type:DataType.>
= ident							(. var identifier:String = t.val; .)
  VariableDeclaratorRest<context, modifiers, type, identifier>
.

/*---------------------------------------------------------------------------*/

/*
VariableDeclaratorId
= ident BracketsOpt
.*/

/*---------------------------------------------------------------------------*/

VariableDeclaratorRest<.context:FieldContext, modifiers:EnumSet<Modifier>, type:DataType, identifier:String.>
= BracketsOpt<out bCount:Int>				(. type = compoundBrackets(type, bCount); .)
							(. var init:Expression = null; .)
  [ "=" VariableInitializer<out expression:Expression>	(. init = expression; .)
    ]							(. context.defineField({identifier: identifier, type: type, modifiers: modifiers}, init); .)
.

/*---------------------------------------------------------------------------*/

VariableInitializer<out expression:Expression>
= ArrayInitializer<out arg:Expression>			(. expression = arg; .)
| Expression0<out arg:Expression>			(. expression = arg; .)
.

/*---------------------------------------------------------------------------*
 *---------------------------- Classes --------------------------------------*
 *---------------------------------------------------------------------------*/

ClassDeclaration<.modifiers:EnumSet<Modifier>.>
= 							(. checkModifierPermission(modifiers, ModifierSet.classes); .)
  "class" ident						(. classContexts.unshift(new ClassContext(modifiers, t.val)); .)
  [ "extends" Type<out arg:DataType> 			(. classContexts[0].extend = arg; .)
    ]
  [ "implements" TypeList<.out arg:Array<DataType>.>	(. classContexts[0].implement = arg; .)
    ]
  ClassBody						(. unit.context.defineClass(classContexts.shift().getClassDefinition()); .)
.

/*---------------------------------------------------------------------------*/

ClassBody
= "{" { ClassBodyDeclaration	
        } "}"
.

/*---------------------------------------------------------------------------*/

ClassBodyDeclaration
= ";"
|							(. var modifiers = new EnumSet<Modifier>(); .)
  ["static"						(. addModifier(modifiers, MStatic); .)
  ] ( Block<out block:Statement, null>			(. classContexts[0].staticConstructor.pushStatement(block); .)
    | [ Modifier1<modifiers> { Modifier0<modifiers> } ] MemberDecl<modifiers>
    )
.

/*---------------------------------------------------------------------------*/

MemberDecl<.modifiers:EnumSet<Modifier>.>
= IF (identAndLPar()) ident				(. var identifier:String = t.val;
							   if (identifier != classContexts[0].identifier) error('invalid function declaration'); .)
  ConstructorDeclaratorRest<modifiers, identifier>
| MethodOrFieldDecl<modifiers>
|							(. checkModifierPermission(modifiers, ModifierSet.methods); .)
  "void" ident						(. var identifier:String = t.val; .)
  VoidMethodDeclaratorRest<modifiers, identifier>
| ClassDeclaration<modifiers>
| InterfaceDeclaration<modifiers>
.

/*---------------------------------------------------------------------------*/

MethodOrFieldDecl<.modifiers:EnumSet<Modifier>.>
= Type<out type:DataType> ident				(. var identifier:String = t.val; .)
  MethodOrFieldRest<modifiers, identifier, type>
.

/*---------------------------------------------------------------------------*/

MethodOrFieldRest<.modifiers:EnumSet<Modifier>, identifier:String, type:DataType.>
=							(. checkModifierPermission(modifiers, ModifierSet.fields);  .) 
  VariableDeclaratorsRest<classContexts[0], modifiers, type, identifier> ';'
|							(. checkModifierPermission(modifiers, ModifierSet.methods); .)
  MethodDeclaratorRest<modifiers, type, identifier>
.

/*---------------------------------------------------------------------------*/

VariableDeclaratorsRest<.context:FieldContext, modifiers:EnumSet<Modifier>, type:DataType, identifier:String.>
= VariableDeclaratorRest<context, modifiers, type, identifier>
  {',' VariableDeclarator<context, modifiers, type>}
.

/*---------------------------------------------------------------------------*/

ArrayInitializer<out expression:Expression>		(. var values:Array<Expression> = []; .)
= "{" [ VariableInitializer<out arg:Expression>		(. values.push(arg); .)
        { IF (commaAndNoRBrace()) ","
	  VariableInitializer<out arg:Expression>	(. values.push(arg); .)
	  }       
      ] [ "," ] 
  "}"
.

/*---------------------------------------------------------------------------*/

MethodDeclaratorRest<.modifiers:EnumSet<Modifier>, type:DataType, identifier:String.>
=							(. var body:Statement = null; .)
  FormalParameters<.out parameters:Array<FormalParameter>.>
  BracketsOpt<out bCount:Int> [ "throws" QualidentList]
  ( Block<out block:Statement, null>			(. body = block; .)
  | ";"
  )							(.
							classContexts[0].defineMethod( {
							    identifier: identifier,
							    type: type,
							    modifiers: modifiers, 
							    parameters: parameters,
							    body: body
							});
							.)
.

/*---------------------------------------------------------------------------*/

VoidMethodDeclaratorRest<.modifiers:EnumSet<Modifier>, identifier:String.>
=							(. var body:Statement = null; .)
  FormalParameters<.out parameters:Array<FormalParameter>.>
  ["throws" QualidentList]
  (Block<out block:Statement, null>			(. body = block; .)
    | ';')						(.
							classContexts[0].defineMethod( {
							    identifier: identifier,
							    type: null,
							    modifiers: modifiers, 
							    parameters: parameters,
							    body: body
							});
							.)
.

/*---------------------------------------------------------------------------*/

ConstructorDeclaratorRest<.modifiers:EnumSet<Modifier>, identifier:String.>
=							(. checkModifierPermission(modifiers, ModifierSet.constructors);
							   var throwsList:Array<Array<String>> = []; .)
  FormalParameters<.out parameters:Array<FormalParameter>.>
  [ "throws" QualidentList ]
  Block<out body:Statement, null>			(.
							classContexts[0].defineMethod( {
							    identifier: identifier,
							    type: null,
							    modifiers: modifiers, 
							    parameters: parameters,
							    body: body
							});
							.)
.

/*---------------------------------------------------------------------------*/

FormalParameters<.out parameters:Array<FormalParameter>.>	(. parameters = []; .)
= "(" [ FormalParameter0<out parameter:FormalParameter>		(. parameters.push(parameter); .)
        { "," FormalParameter0<out parameter:FormalParameter>	(. parameters.push(parameter); .)
	  } ] ")"
.

/*---------------------------------------------------------------------------*
 *---------------------------- Interfaces -----------------------------------*
 *---------------------------------------------------------------------------*/

InterfaceDeclaration<.modifiers:EnumSet<Modifier>.>
=							(. checkModifierPermission(modifiers, ModifierSet.interfaces); .)
  "interface" ident [ "extends" TypeList<.out extend:Array<DataType>.> ] InterfaceBody
.

/*---------------------------------------------------------------------------*/

InterfaceBody
= "{" { InterfaceBodyDeclaration } "}"
.

/*---------------------------------------------------------------------------*/

InterfaceBodyDeclaration				(. var modifiers = new EnumSet<Modifier>(); .) 
= ";"
| { Modifier0<modifiers> } InterfaceMemberDecl<modifiers>
.

/*---------------------------------------------------------------------------*/

InterfaceMemberDecl<.modifiers:EnumSet<Modifier>.>
= InterfaceMethodOrFieldDecl<modifiers>
|							(. checkModifierPermission(modifiers, ModifierSet.interfaces); .)
  "void" ident VoidInterfaceMethodDeclaratorRest
| ClassDeclaration<modifiers>
| InterfaceDeclaration<modifiers>
.

/*---------------------------------------------------------------------------*/

InterfaceMethodOrFieldDecl<.modifiers:EnumSet<Modifier>.>
= Type<out type:DataType> ident InterfaceMethodOrFieldRest<modifiers>
.

/*---------------------------------------------------------------------------*/

InterfaceMethodOrFieldRest<.modifiers:EnumSet<Modifier>.>
=							(. checkModifierPermission(modifiers, ModifierSet.constants);  .) 
  ConstantDeclaratorsRest ";"
|							(. checkModifierPermission(modifiers, ModifierSet.interfaces); .) 
  InterfaceMethodDeclaratorRest
.

/*---------------------------------------------------------------------------*/

ConstantDeclaratorsRest
= ConstantDeclaratorRest { "," ConstantDeclarator }
.

/*---------------------------------------------------------------------------*/

ConstantDeclaratorRest
= BracketsOpt<out bCount:Int> "=" VariableInitializer<out expression:Expression>
.

/*---------------------------------------------------------------------------*/

ConstantDeclarator
= ident ConstantDeclaratorRest
.

/*---------------------------------------------------------------------------*/

InterfaceMethodDeclaratorRest
= FormalParameters<.out parameters:Array<FormalParameter>.> BracketsOpt<out bCount:Int> [ "throws" QualidentList] ";"
.

/*---------------------------------------------------------------------------*/

VoidInterfaceMethodDeclaratorRest
= FormalParameters<.out parameters:Array<FormalParameter>.> [ "throws" QualidentList] ";"
.

/*---------------------------------------------------------------------------*
 *---------------------------- Statements -----------------------------------*
 *---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

Statement0<out statement:Statement>
= Block<out block:Statement, blockContexts[0]>		(. statement = block; .)
| "if" ParExpression<out condition:Expression>
   Statement0<out thenStatement:Statement>		(. var elseStatement:Statement = null; .)
   [ "else" Statement0<out body:Statement>		(. elseStatement = body; .)
     ]							(. statement = SConditional(condition, thenStatement, elseStatement); .)
| "for" "("						(. blockContexts.unshift(new BlockContext(blockContexts[0])); .)
  [ ForInit ] ";"					(. var conditional:Expression = EBooleanLiteral(true); .)
  [ Expression0<out expression:Expression>		(. conditional = expression; .)
    ] ";"						(. var body:Array<Statement> = []; .)
  [ ForUpdate<.out updates:Array<Statement>.>		(. body = updates; .)
    ] ")"
  Statement0<out arg:Statement>				(. body = [arg].concat(body);
							   blockContexts[0].pushStatement(SLoop(conditional, SBlock(new Hash<FieldDefinition>(), body), false));
							   statement = blockContexts.shift().getBlockStatement(); .)
| "while" ParExpression<out condition:Expression>
  Statement0<out body:Statement>			(. statement = SLoop(condition, body, false); .)
| "do" Statement0<out body:Statement>
  "while" ParExpression<out condition:Expression> ";"	(. statement = SLoop(condition, body, true); .)
| "try" Block<out body:Statement, blockContexts[0]>	(. var catches:Array<Catch> = [], finallyBody:Statement = null; .)
  ( Catches<.out _catches:Array<Catch>.>		(. catches = _catches; .)
    [ "finally" Block<out block:Statement, blockContexts[0]>	(. finallyBody = block; .)
      ]
    | "finally" Block<out block:Statement, blockContexts[0]>	(. finallyBody = block; .)
      )							(. statement = STry(body, catches, finallyBody); .)
| "switch" ParExpression<out expression:Expression> '{' SwitchBlockStatementGroups '}' /* TODO */
| "synchronized" ParExpression<out expression:Expression>
  Block<out block:Statement, blockContexts[0]>		/* TODO */
| "return"						(. var value:Expression = null; .)
  [ Expression0<out expression:Expression>		(. value = expression; .)
    ] ";"						(. statement = SReturn(value); .)
| "throw" Expression0<out expression:Expression> ";"	(. statement = SThrow(expression); .)
| "break"						(. var label:String = null; .)
  [ ident						(. label = t.val; .)
    ] ';'						(. statement = SBreak(label); .)
| "continue"						(. var label:String = null; .)
  [ ident						(. label = t.val; .)
    ] ';'						(. statement = SContinue(label); .)
| ";"
| IF (isLabel()) ident					(. var label:String = t.val; .)
  ":" Statement0<out body:Statement>			(. statement = SLabel(label, body); .)
| StatementExpression<out arg:Statement> ';'		(. statement = arg; .)
.

/*---------------------------------------------------------------------------*/

Block<out statement:Statement, parent:BlockContext>	(. blockContexts.unshift(new BlockContext(parent)); .)
= "{" { BlockStatement } "}"				(. statement = blockContexts.shift().getBlockStatement(); .)
.

/*---------------------------------------------------------------------------*/

BlockStatement
= IF(isLocalVarDecl(false)) LocalVariableDeclaration ";"
| ClassOrInterfaceDeclaration				/*[TODO] support local classes... */
| Statement0<out statement:Statement>			(. blockContexts[0].pushStatement(statement); .)
.

/*---------------------------------------------------------------------------*/

LocalVariableDeclaration				(. var modifiers = new EnumSet<Modifier>(); .)
= [ "final"						(. modifiers.add(MFinal); .)
    ] Type<out type:DataType> VariableDeclarators<blockContexts[0], modifiers, type>
.

/*---------------------------------------------------------------------------*/

VariableDeclarators<.context:FieldContext, modifiers:EnumSet<Modifier>, type:DataType.>
= VariableDeclarator<context, modifiers, type>
  { "," VariableDeclarator<context, modifiers, type> }
.

/*---------------------------------------------------------------------------*/

ForInit
= IF (isLocalVarDecl(true)) LocalVariableDeclaration
| StatementExpression<out statement:Statement>			(. blockContexts[0].pushStatement(statement); .)
  MoreStatementExpressions<.out statements:Array<Statement>.>	(.
								for (statement in statements)
									blockContexts[0].pushStatement(statement);
								.)
.

/*---------------------------------------------------------------------------*/

ForUpdate<.out statements:Array<Statement>.>
= StatementExpression<out statement:Statement>			(. statements = [statement]; .)
  MoreStatementExpressions<.out arg:Array<Statement>.>		(. statements = statements.concat(arg); .)
.

/*---------------------------------------------------------------------------*/

StatementExpression<out statement:Statement>
= Expression0<out expression:Expression>		(. checkExprStat(expression);
							   statement = SExpression(expression); .)
.

/*---------------------------------------------------------------------------*/

MoreStatementExpressions<.out statements:Array<Statement>.>
=							(. statements = []; .)
  { "," StatementExpression<out statement:Statement>	(. statements.push(statement); .)
    }
.

/*---------------------------------------------------------------------------*/

Catches<.out catches:Array<Catch>.>			(. catches = []; .)
= CatchClause<out catchBlock:Catch>			(. catches.push(catchBlock); .)
  { CatchClause<out catchBlock:Catch>			(. catches.push(catchBlock); .)
    }
.

/*---------------------------------------------------------------------------*/

CatchClause<out _catch:Catch>
= "catch" "(" FormalParameter0<out parameter:FormalParameter> ")"
  Block<out block:Statement, blockContexts[0]>		(. _catch = {parameter: parameter, body: block}; .)
.

/*---------------------------------------------------------------------------*/

SwitchBlockStatementGroups
= { SwitchBlockStatementGroup }
.

/*---------------------------------------------------------------------------*/

SwitchBlockStatementGroup
= SwitchLabel { BlockStatement }
.

/*---------------------------------------------------------------------------*/

SwitchLabel
= "case" Expression0<out expression:Expression> ':'
| "default" ':'
.

/*---------------------------------------------------------------------------*
 *---------------------------- Expressions ----------------------------------*
 *---------------------------------------------------------------------------*/

Expression0<out expression:Expression>
= Expression1<out expression:Expression>
  {
    AssignmentOperator<out operator:InfixOperator>
    Expression1<out value:Expression>			(.
							// rewrite assignment operators as expressions
							if (operator != null)
								value = EInfixOperation(operator, expression, value);
							// extract reference type
							switch (expression) {
							    case ELocalReference(identifier): expression = ELocalAssignment(identifier, value);
							    case EReference(identifier, base): expression = EAssignment(identifier, base, value);
							    case EArrayAccess(index, base): expression = EArrayAssignment(index, base, value);
							    case ELexExpression(lexpression):
								switch (lexpression) {
								    case LReference(identifier): expression = ELexExpression(LAssignment(identifier, value));
								    default: error('invalid assignment left-hand side');
								}
							    default: error('invalid assignment left-hand side');
							}
							.)
  }
.

/*---------------------------------------------------------------------------*/

Expression1<out expression:Expression>
= Expression2<out expression:Expression>
  [ ConditionalExpr<out rest:Expression, expression>	(. expression = rest; .)
    ]
.

/*---------------------------------------------------------------------------*/

ConditionalExpr<out expression:Expression, conditional:Expression>
= "?" Expression0<out thenExpression:Expression>
  ":" Expression1<out elseExpression:Expression>	(. expression = EConditional(conditional, thenExpression, elseExpression); .)
.

/*---------------------------------------------------------------------------*/

Expression2<out expression:Expression>
= Expression3<out expression:Expression>
  [ Expression2Rest<out rest:Expression, expression>	(. expression = rest; .)
    ]
.

/*---------------------------------------------------------------------------*/

Expression2Rest<out expression:Expression, operand:Expression>
=							(. var builder = new OperationBuilder(); builder.operand(operand); .)
  Infixop<out operator:InfixOperator>			(. builder.operator(operator); .)
  Expression3<out operand:Expression>			(. builder.operand(operand); .)
  { Infixop<out operator:InfixOperator>			(. builder.operator(operator); .)
    Expression3<out operand:Expression>			(. builder.operand(operand); .)
    }							(. expression = builder.reduce(); .)
| "instanceof" Type<out type:DataType>			(. expression = EInstanceOf(expression, type); .)
.

/*---------------------------------------------------------------------------*/

/*
Expression3<out expression:Expression>               (. var pre:Int = ExprKind.NONE;        .)
= { IF(prefix.get(la.kind) || isTypeCast())
    ( PrefixOp<info>      (. if(pre == ExprKind.NONE) pre = info.getKind(); .)
    | "(" Type ")"                       (. info.setKind(ExprKind.TYPECAST);.)
    )
  }
  Primary<info> { Selector<info> } { PostfixOp<info> }
                            (. if (pre != ExprKind.NONE) info.setKind(pre); .)
.*/

Expression3<out expression:Expression>
= ( Increment<out type:IncrementType>
    Expression3<out rest:Expression>			(. expression = EPrefix(type, rest); .)
    | PrefixOp<out operator:PrefixOperator>
      Expression3<out rest:Expression>			(. expression = EPrefixOperation(operator, rest); .)
  )
| IF(isTypeCast()) "(" Type<out type:DataType> ")"
  Expression3<out rest:Expression>			(. expression = ECast(type, rest); .)
| Primary<out rest:Expression>				(. expression = rest; .)
  { Selector<out rest:Expression, expression>		(. expression = rest; .)
    }
  { Increment<out type:IncrementType>			(. expression = EPostfix(type, expression); .)
    }
.

/*---------------------------------------------------------------------------*/

Primary<out expression:Expression>
= "(" Expression0<out arg:Expression> ")" 		(. expression = arg; .)
| "this" 						(. expression = EThisReference; .)
  [ Arguments<.out arguments:Array<Expression>.>	(. expression = EThisCall(arguments); .)
    ]
| "super" SuperSuffix<out arg:Expression> 		(. expression = arg; .)
| Literal<out arg:Expression> 				(. expression = arg; .)
| "new"	Creator<out arg:Expression> 			(. expression = arg; .)
| ident							(. var identifier:String = t.val, base:Expression = null; .)
  { IF(dotAndIdent()) '.' ident				(. base = base != null ? EReference(identifier, base) :
								blockContexts[0].isFieldDefined(identifier) ? ELocalReference(identifier) : ELexExpression(LReference(identifier));
							   identifier = t.val; .)
    }							(. expression = base != null ? EReference(identifier, base) :
								blockContexts[0].isFieldDefined(identifier) ? ELocalReference(identifier) : ELexExpression(LReference(identifier)); .)
  [ IF(isIdentSuffix()) IdentifierSuffix<out arg:Expression, identifier, base> 	(. expression = arg; .)
    ]
| BasicType<out type:PrimitiveType>
  BracketsOpt<out bCount:Int> '.' "class"		/* (. info.setKind(ExprKind.SELECT);  .) */
| "void" '.' "class"					/* (. info.setKind(ExprKind.SELECT);  .) */
.

/*---------------------------------------------------------------------------*/

Arguments<out arguments:Array<Expression>>		(. arguments = []; .) 
= "(" [ Expression0<out expression:Expression>		(. arguments.push(expression); .)
        { "," Expression0<out expression:Expression> 	(. arguments.push(expression); .)
	  } ] ")"
.

/*---------------------------------------------------------------------------*/

ArgumentsOpt<out expression:Expression, identifier:String, base:Expression>
=							(. expression = EReference(identifier, base); .)
  [ Arguments<.out arguments:Array<Expression>.>	(. expression = ECall(identifier, base, arguments); .)
    ]
.

/*---------------------------------------------------------------------------*/

SuperSuffix<out expression:Expression>
= Arguments<.out arguments:Array<Expression>.>		(. expression = ESuperCall(arguments); .)
| '.' ident						(. var identifier:String = t.val; .)
  ArgumentsOpt<out arg:Expression, identifier, ESuperReference>	(. expression = arg; .)
.

/*---------------------------------------------------------------------------*/

Literal<out expression:Expression>
= intLit						(. expression = EIntegerLiteral(Std.parseInt(t.val)); .)
| floatLit						(. expression = EFloatLiteral(Std.parseFloat(t.val)); .)
| charLit						(. expression = ECharLiteral(t.val.charCodeAt(0)); .)
| stringLit						(. expression = EStringLiteral(t.val); .)
| "true"						(. expression = EBooleanLiteral(true); .)
| "false"						(. expression = EBooleanLiteral(false); .)
| "null"						(. expression = ENull; .)
.

/*---------------------------------------------------------------------------*/

Creator<out expression:Expression>
= BasicType<out type:PrimitiveType>
  ArrayCreatorRest<out arg:Expression, DTPrimitive(type)>		(. expression = arg; .)
| Qualident<.out qualifier:Array<String>.> 				/*[TODO] is DTReference ambig? */
  ( ArrayCreatorRest<out arg:Expression, DTReference(qualifier)>	(. expression = arg; .)
  | ClassCreatorRest<out arg:Expression, qualifier>			(. expression = arg; .)
  )
.

/*---------------------------------------------------------------------------*/

ArrayCreatorRest<out expression:Expression, type:DataType>
= "["
  ( "]" BracketsOpt<out bCount:Int> ArrayInitializer<out expression:Expression>
    | Expression0<out dummy:Expression> "]" 
      { IF (nonEmptyBracket()) "[" Expression0<out dummy:Expression> "]" } 
      { IF (emptyBracket()) "[" "]" }
  )
.

/*---------------------------------------------------------------------------*/

ClassCreatorRest<.out expression:Expression, qualifier:Array<String>.>
= Arguments<.out arguments:Array<Expression>.>		(. expression = EObjectInstantiation(qualifier, arguments); .)
  [ ClassBody ]						(. /* TODO */ .)
.

/*---------------------------------------------------------------------------*/

IdentifierSuffix<out expression:Expression, identifier:String, base:Expression>
= '[' ']' BracketsOpt<out bCount:Int> "." "class"	(. /* info.setKind(ExprKind.SELECT); */ .)
|  Arguments<.out arguments:Array<Expression>.>		(. expression = base == null ? ELexExpression(LCall(identifier, arguments)) : ECall(identifier, base, arguments); .)
|  "." ( "class" | "this" |
         "super" '.' ident
	 ArgumentsOpt<out dummy:Expression, null, null>)	(. /* TODO */ .)
.

/*---------------------------------------------------------------------------*/

Selector<out expression:Expression, base:Expression>
= "." ( ident							(. var identifier:String = t.val; .)
	ArgumentsOpt<out arg:Expression, identifier, base>	(. expression = arg; .)
      | "super" Arguments<.out arguments:Array<Expression>.>	(. /* TODO */ .)
      | "new" InnerCreator
      )
| '[' Expression0<out index:Expression> ']'			(. expression = EArrayAccess(index, base); .)
.

/*---------------------------------------------------------------------------*/

InnerCreator						(. var qualifier:Array<String> = []; .)
= ident ClassCreatorRest<out expression:Expression, qualifier>
.

/*---------------------------------------------------------------------------*/

ParExpression<out expression:Expression>
= "(" Expression0<out expression:Expression> ")"
.

/*---------------------------------------------------------------------------*/

AssignmentOperator<out operator:InfixOperator>			
= "="						(. operator = null; .)
| "+="						(. operator = OpAdd; .)
| "-="						(. operator = OpSubtract; .)
| "*="						(. operator = OpMultiply; .)
| "/="						(. operator = OpDivide; .)
| "&="						(. operator = OpBitwiseAnd; .)
| "|="						(. operator = OpBitwiseOr; .)
| "^="						(. operator = OpBitwiseXor; .)
| "%="						(. operator = OpModulus; .)
| "<<="						(. operator = OpLeftShift; .)
| ">>="						(. operator = OpRightShift; .)
| ">>>="					(. operator = OpZeroRightShift; .)
.

/*---------------------------------------------------------------------------*/

Infixop<out operator:InfixOperator>
= "||"						(. operator = OpOr; .)
| "&&"						(. operator = OpAnd; .)
| "|"						(. operator = OpBitwiseOr; .)
| "^"						(. operator = OpBitwiseXor; .)
| "&"						(. operator = OpBitwiseAnd; .)
| "=="						(. operator = OpEqual; .)
| "!="						(. operator = OpUnequal; .)
| "<"						(. operator = OpLessThan; .)
| ">"						(. operator = OpGreaterThan; .)
| "<="						(. operator = OpLessThanOrEqual; .)
| ">="						(. operator = OpGreaterThanOrEqual; .)
| "<<"						(. operator = OpLeftShift; .)
| ">>"						(. operator = OpRightShift; .)
| ">>>"						(. operator = OpZeroRightShift; .)
| "+"						(. operator = OpAdd; .)
| "-"						(. operator = OpSubtract; .)
| "*"						(. operator = OpMultiply; .)
| "/"						(. operator = OpDivide; .)
| "%"						(. operator = OpModulus; .)
.

/*---------------------------------------------------------------------------*/

PrefixOp<out operator:PrefixOperator>
/*= "++"
| "--"*/
= "!"						(. operator = OpNot; .)
| "~"						(. operator = OpBitwiseNot; .)
| "+"						(. operator = OpUnaryPlus; .)
| "-"						(. operator = OpUnaryMinus; .)
.

/*---------------------------------------------------------------------------*/

Increment<out type:IncrementType>
= "++"						(. type = IIncrement; .)
| "--"						(. type = IDecrement; .)
.

/*---------------------------------------------------------------------------*/
/*
PostfixOp<builder:ExpressionBuilder>
= "++"						(. builder.pushOperator(PPostfix(IIncrement)); .)
| "--"						(. builder.pushOperator(PPostfix(IDecrement)); .)  
.*/

/*---------------------------------------------------------------------------*/

END PdeProgram.
