/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported from C# to Java by Wolfgang Ahorner
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
------------------------------------------------------------------------*/
-->begin

class Parser {
-->constants
	inline static var T:Bool = true;
	inline static var x:Bool = false;
	static var minErrDist:Int = 2;

	public var t:Token;    // last recognized token
	public var la:Token;   // lookahead token
	var errDist:Int;
	
	public var scanner:Scanner;
	public var errors:Errors;

	-->declarations

	public function new(scanner:Scanner) {
		errDist = minErrDist;
		this.scanner = scanner;
		errors = new Errors();
	}

	function SynErr (n:Int):Void {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public function SemErr (msg:String):Void {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	function Get ():Void {
		while (true) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
				++errDist;
				break;
			}
-->pragmas
			la = t;
		}
	}
	
	function Expect (n:Int):Void {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	function StartOf (s:Int):Bool {
		return set[s][la.kind];
	}
	
	function ExpectWeak (n:Int, follow:Int):Void {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	function WeakSeparator (n:Int, syFol:Int, repFol:Int):Bool {
		var kind:Int = la.kind;
		if (kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			SynErr(n);
			while (!(set[syFol][kind] || set[repFol][kind] || set[0][kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
-->productions

	public function Parse():PdeProgram {
		la = new Token();
		la.val = "";		
		Get();
		
		var ret:PdeProgram = -->parseRoot
		Expect(0);
		return ret;
	}

	private static var set:Array<Array<Bool>> = [
-->initialization
	];
} // end Parser


class Errors {
	public var count:Int;                                    // number of errors detected
//	public java.io.PrintStream errorStream = System.out;     // error messages go to this stream
	static var errMsgFormat:String = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
	
	public function new() {
		count = 0;
	}
	
	public function printMsg(line:Int, column:Int, msg:String):Void {
		var b:String = errMsgFormat;
		b = StringTools.replace(b, '{0}', Std.string(line));
		b = StringTools.replace(b, '{1}', Std.string(column));
		b = StringTools.replace(b, '{2}', msg);
		trace(b);
	}
	
	public function SynErr (line:Int, col:Int, n:Int):Void {
		var s:String;
		switch (n) {-->errors
			default: s = "error " + n;
		}
		printMsg(line, col, s);
		count++;
		throw new FatalError(s);
	}

	public function SemErr (?line:Int, ?col:Int, s:String):Void {
		line == null ? printMsg(line, col, s) : trace(s);
		count++;
		throw new FatalError(s);
	}
	
	public function Warning (?line:Int, ?col:Int, s:String):Void {	
		line == null ? printMsg(line, col, s): trace(s);
	}
} // Errors

class FatalError {
	public var message:String;
	public static var serialVersionUID:Float = 1.0;
	public function new(s:String) { this.message = s; }
}

/*------------------------- modifier handling -----------------------------*/

class ModifierSet
{
	static public var none		= new EnumSet<Modifier>([]);
	static public var access	= new EnumSet<Modifier>([MPublic, MProtected, MPrivate]);
	static public var classes	= new EnumSet<Modifier>([MPublic, MProtected, MPrivate, MAbstract, MStatic, MFinal, MStrictfp]);
	static public var fields	= new EnumSet<Modifier>([MPublic, MProtected, MPrivate, MStatic, MFinal, MTransient, MVolatile]);
	static public var methods	= new EnumSet<Modifier>([MPublic, MProtected, MPrivate, MAbstract, MSynchronized, MNative, MStatic, MFinal, MStrictfp]);
	static public var constructors	= new EnumSet<Modifier>([MPublic, MProtected, MPrivate]);
	static public var interfaces	= new EnumSet<Modifier>([MPublic, MProtected, MPrivate, MAbstract, MStatic, MStrictfp]);
	static public var constants	= new EnumSet<Modifier>([MPublic, MStatic, MFinal]);
	static public var all		= new EnumSet<Modifier>([MPublic, MProtected, MPrivate, MAbstract, MVolatile, MTransient, MSynchronized, MNative, MStatic, MFinal, MStrictfp]);
}

/*-------------------- expression building ----------------------------------*/

class OperationBuilder
{
	private var operators:Array<InfixOperator>;
	private var operands:Array<Expression>;
	
	public function new() {
		operators = [];
		operands = [];
	}
	
	public function operator(operator:InfixOperator)
	{
		reduce(lookupOperatorPrecedence(operator));
		operators.push(operator);
	}
	
	public function operand(operand:Expression)
	{
		operands.push(operand);
	}
	
	public function reduce(?precedence:Int = 0):Expression
	{
		while (operators.length > 0 && lookupOperatorPrecedence(operators[operators.length - 1]) >= precedence)
			reduceOperator(operators.pop());
		return operands[0];
	}

	private function reduceOperator(operator:InfixOperator):Void
	{
		var b:Expression = operands.pop(), a:Expression = operands.pop();
		operands.push(EInfixOperation(operator, a, b));
	}
	
// http://www.particle.kth.se/~lindsey/JavaCourse/Book/Part1/Java/Chapter02/operators.html

	private function lookupOperatorPrecedence(operator:InfixOperator):Int
	{
		return switch (operator)
		{
		    case OpOr: 3;
		    case OpAnd: 4;
		    case OpBitwiseOr: 5;
		    case OpBitwiseXor: 6;
		    case OpBitwiseAnd: 7;
		    case OpEqual, OpUnequal: 8;
		    case OpLessThan, OpLessThanOrEqual, OpGreaterThan, OpGreaterThanOrEqual: 9;
		    case OpLeftShift, OpRightShift, OpZeroRightShift: 10;
		    case OpAdd, OpSubtract: 11;
		    case OpMultiply, OpDivide, OpModulus: 12;
//		    case OpNot, OpBitwiseNot, OpUnaryPlus, OpUnaryMinus: 14;
		}
	}
}

/*-------------------- block scope ----------------------------------*/

class Scope
{
	var parent:Scope;
	var definitions:Array<Definition>;
	
	public function new() {
		definitions = [];
	}
	
	public function pushDefinition(definition:Definition) {
		definitions.push(definition);
	}
	
	public function getDefinitions():Array<Definition> {
		return definitions;
	}
	
	public function concat(block:Scope) {
		for (definition in block.definitions)
			pushDefinition(definition);
	}
}

class CompilationUnitScope extends Scope
{
	public var _package:Array<String>;
	public var _imports:Array<Array<String>>;
	
	public function new() {
		super();
		_package = [];
		_imports = [];
	}
	
	public function setPackage(ident:Array<String>) { _package = ident; }	
	public function getPackage():Array<String> { return _package; }
	
	public function pushImport(ident:Array<String>) { _imports.push(ident); }
	public function getImports():Array<Array<String>> { return _imports; }
}

class BlockScope extends Scope
{
	var statements:Array<Statement>;
	
	public function new() {
		super();
		statements = [];
	}
		
	public function pushStatement(statement:Statement) {
		statements.push(statement);
	}
	
	override public function concat(block:Scope) {
		super.concat(block);
		var block:BlockScope = cast(block, BlockScope);
		for (statement in block.statements)
			pushStatement(statement);
	}
	
	public function getStatement():Statement {
		return SBlock(definitions, statements);
	}
}

class ClassScope extends BlockScope
{
	override public function getStatement():Statement {
		return SBlock([], statements);
	}
}

/*-------------------- PdeProgram ----------------------------------*/

interface CompilationUnit
{
	public function setPackage();
	public function getDefinitions():Array<TopLevelDefinition>;
//[TODO] get name?
}
//[TODO] also, PDE doesn't really respect compilation units (doesn't allow package definitions, requires a name for each unit)

/* compilation unit */

typedef CompilationUnit = {
	var packageIdent:Array<String>;
	var importIdents:Array < Array < String >> ;
	var definitions:Array<Definition>;
}

//[TODO] writeImports: http://dev.processing.org/source/index.cgi/trunk/processing/app/src/processing/app/preproc/PdePreprocessor.java?view=markup

class JavaProgram extends CompilationUnitScope, implements PdeProgram
{
	public function getCompilationUnit(identifier:String):CompilationUnit
	{
		// create straight compilation unit
		return {
		    packageIdent: _package,
		    importIdents: _imports,
		    definitions: definitions
		};
	}
}

class ActiveProgram extends ClassScope, implements PdeProgram
{
	public function getCompilationUnit(identifier:String):CompilationUnit
	{
		// create class extension
		var classDefinition = DClass(identifier, new EnumSet<Modifier>([MPublic]), definitions, DTReference(['PApplet']));

		// create compilation unit
		return {
		    packageIdent: [],
		    importIdents: [['xpde', 'core', '*'], ['xpde', 'xml', '*']],
		    definitions: [classDefinition]
		};
	}
}

class StaticProgram extends BlockScope, implements PdeProgram
{
	public function getCompilationUnit(identifier:String):CompilationUnit
	{
		// create setup function
		var setupDefinition = DMethod('setup', null, new EnumSet<Modifier>(), [], getStatement());
	
		// create class extension
		var classDefinition = DClass(identifier, new EnumSet<Modifier>([MPublic]), [setupDefinition], DTReference(['PApplet']));

		// create compilation unit
		return {
		    packageIdent: [],
		    importIdents: [],
		    definitions: [classDefinition]
		};
	}
}
  
/*-------------------- bit array ----------------------------------*/

class BitSet 
{
	private var bitset:Array < Bool >;

	public function new(nbits:Int) 
	{
		bitset = [];
		for (i in 0...nbits)
			bitset.push(false);
	}
	
	inline public function get(bitIndex:Int):Bool
	{
		return bitset[bitIndex];
	}
	
	inline public function set(bitIndex:Int)
	{
		bitset[bitIndex] = true;
	}
	
	public function or(bitset2:BitSet)
	{
		for (i in 0...bitset.length)
			bitset[i] = bitset[i] || bitset2.get(i);
	}
}

$$$
